<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeSnipps</title>
    <link>http://codesnipps.simolation.de/</link>
    <description>Recent content on CodeSnipps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Tue, 15 Aug 2017 20:56:32 +0200</lastBuildDate>
    
	<atom:link href="http://codesnipps.simolation.de/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android: Volley Set Headers</title>
      <link>http://codesnipps.simolation.de/post/android/volley-set-headers/</link>
      <pubDate>Tue, 15 Aug 2017 20:56:32 +0200</pubDate>
      
      <guid>http://codesnipps.simolation.de/post/android/volley-set-headers/</guid>
      <description>If you are using volley for android as described in this post, you might have to set headers to get the wanted response from your server.
Therefore you just have to add after the wanted request an Map, that returns the desired headers:
JsonObjectRequest jsonObjectRequest = new JsonObjectRequest( ... ) { @Override public Map&amp;lt;String, String&amp;gt; getHeaders() { Map&amp;lt;String, String&amp;gt; params = new HashMap&amp;lt;String, String&amp;gt;(); params.put(&amp;quot;x-vacationtoken&amp;quot;, &amp;quot;secret_token&amp;quot;); params.put(&amp;quot;content-type&amp;quot;, &amp;quot;application/json&amp;quot;); return params; } };  Code Example String url = &amp;quot;http://httpbin.</description>
    </item>
    
    <item>
      <title>Android: Get Started With Volley</title>
      <link>http://codesnipps.simolation.de/post/android/get-started-with-volley/</link>
      <pubDate>Tue, 15 Aug 2017 13:26:38 +0200</pubDate>
      
      <guid>http://codesnipps.simolation.de/post/android/get-started-with-volley/</guid>
      <description>In android it is very useful to make network requests to mostly interact with an api. There are many ways to achieve that, but the simplest way - that is also recommended by Google - is the library volley.
Get Started At first you have to add the volley library to your build.gradle
dependencies { ... compile &#39;com.android.volley:volley:1.0.0&#39; }  Next you have to add the Internet permission to your AndroidManifest.</description>
    </item>
    
    <item>
      <title>Android: Programmatically hide and show the keyboard</title>
      <link>http://codesnipps.simolation.de/post/android/hide-and-show-keyboard/</link>
      <pubDate>Tue, 15 Aug 2017 12:16:14 +0200</pubDate>
      
      <guid>http://codesnipps.simolation.de/post/android/hide-and-show-keyboard/</guid>
      <description>Sometimes you might want to programmatically close or open the soft keyboard in your app.
Open soft keyboard When you click on a button you can focus an editText and open the keyboard, to start typing
//Get EditText instance EditText editText = (EditText) findViewById(R.id.edit_text); //focus editText editText.requestFocus(); //create InputMethodManager InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE); //show soft keyboard and you can start typing into editText imm.showSoftInput(editText, InputMethodManager.SHOW_IMPLICIT);  Hide soft keyboard When you submit a form, you might want to hide the keyboard, even if the editText is still focused</description>
    </item>
    
    <item>
      <title>Android: Select date with DatePickerDialog</title>
      <link>http://codesnipps.simolation.de/post/android/datepicker/</link>
      <pubDate>Mon, 14 Aug 2017 23:05:47 +0200</pubDate>
      
      <guid>http://codesnipps.simolation.de/post/android/datepicker/</guid>
      <description>With androids date picker you can easily choose a date without much code.
Guide How To 1.Add latest appcompat library to your build.gradle.
dependencies { ... compile &#39;com.android.support:appcompat-v7:26.+&#39; // set exact version here }  2.Make sure, that your activity extends android.support.v7.app.AppCompatActivity.
public class MainActivity extends AppCompatActivity { ... }  3.Create your DatePickerDialog and set a context, a listener and the start year, month and day.
DatePickerDialog datePickerDialog = new DatePickerDialog( context, listener, startYear, starthMonth, startDay);  4.</description>
    </item>
    
  </channel>
</rss>